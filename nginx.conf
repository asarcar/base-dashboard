# services/frontend/dashboard/nginx.conf
# Nginx configuration for a Single Page Application (SPA) with History API Fallback

# Define the number of worker processes. Typically 1 per CPU core.
worker_processes 1;

# Error logging for debugging. Change 'warn' to 'error' or 'crit' for production.
error_log /var/log/nginx/error.log warn;

# Event block defines how Nginx handles connections.
events {
    worker_connections 1024; # Max simultaneous connections per worker.
}

# HTTP block contains server-wide settings.
http {
    # Include common MIME types for serving various file types.
    include /etc/nginx/mime.types;
    default_type application/octet-stream; # Default MIME type if not found.

    # Enable efficient file transfers.
    sendfile on;
    tcp_nopush on; # Optimizes sending of response headers.
    tcp_nodelay on; # Optimizes sending of small packets.

    # Timeout for keep-alive connections.
    keepalive_timeout 65;
    types_hash_max_size 2048; # Adjust if you have many custom MIME types.

    # Gzip compression settings for faster delivery of content.
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Define the server block for your application.
    server {
        listen 3080; # Nginx will listen on port 3080 inside the container.
        server_name localhost; # Domain name for the server.

        # Set the root directory for serving static files.
        # This matches where Bazel's pkg_tar rule places your dist/ content.
        root /usr/share/nginx/html;

        # Define default files to serve when a directory is requested.
        index index.html index.htm;

        # CRITICAL: History API Fallback for Single Page Applications (SPAs).
        # This directive tries to find the requested URI as a file ($uri),
        # then as a directory ($uri/), and if neither is found, it falls back
        # to serving the index.html file. This allows client-side routing to work.
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Optional: If you have specific API routes that Nginx should proxy.
        # This is an example, you would configure it based on your backend.
        # location /api/ {
        #     proxy_pass http://your_backend_service:8080;
        #     proxy_http_version 1.1;
        #     proxy_set_header Upgrade $http_upgrade;
        #     proxy_set_header Connection 'upgrade';
        #     proxy_set_header Host $host;
        #     proxy_cache_bypass $http_upgrade;
        # }
    }
}
